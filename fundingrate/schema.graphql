type User @entity {
  id: ID!
  accounts: [Account] @derivedFrom(field: "user")
}

type Account @entity {
  id: ID!
  user: User! @derivedFrom(field: "accounts")
  address: String!
  resultEntities: [ResultEntity] @derivedFrom(field: "account")
  globalFee: GlobalFee @derivedFrom(field: "account")
  debugEntities: [DebugEntity] @derivedFrom(field: "account")
}

# in RFQ and Open create this entity
type ResultEntity @entity {
  id: String!
  quoteId: BigInt! #new
  quoteStatus: Int
  fillAmount: BigInt
  closedPrice: BigInt # done
  closePrice: BigInt # request
  partyA: Bytes!
  partyB: Bytes
  quantityToClose: BigInt
  symbolId: BigInt
  positionType: Int
  requestedOpenPrice: BigInt
  quantity: BigInt
  partyAmm: BigInt
  partyBmm: BigInt
  leverage: BigInt
  requestedOpenLimitPrice: BigInt
  maxFundingRate: BigInt
  openedPrice: BigInt
  timeStamp: BigInt!
  marketPrice: BigInt
  initialOpenedPrice: BigInt
  initialQuantity: BigInt!
  closedAmount: BigInt
  fee: BigInt

  user: User!
  account: Account!
}

type GlobalFee @entity {
  id: String!
  globalFee: BigInt!
  latestTimeStamp: BigInt!
}

type DebugEntity @entity {
  id: String!
  timestamp: BigInt!
  trigger: BigInt
  type: String
  message: String
}
